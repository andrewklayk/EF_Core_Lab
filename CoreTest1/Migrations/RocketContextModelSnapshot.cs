// <auto-generated />
using System;
using CoreTest1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreTest1.Migrations
{
    [DbContext(typeof(RocketContext))]
    partial class RocketContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreTest1.Models.Contract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("SignDate");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("CoreTest1.Models.ContractItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractID");

                    b.Property<int>("PartID");

                    b.Property<int>("Quantity");

                    b.HasKey("ID");

                    b.HasIndex("ContractID");

                    b.HasIndex("PartID");

                    b.ToTable("ContractItems");
                });

            modelBuilder.Entity("CoreTest1.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CoreTest1.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("Surname");

                    b.HasKey("ID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CoreTest1.Models.Left", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArrDate");

                    b.Property<int>("PartID");

                    b.Property<int>("Quantity");

                    b.Property<int>("StockID");

                    b.HasKey("ID");

                    b.HasIndex("PartID");

                    b.HasIndex("StockID");

                    b.ToTable("Lefts");
                });

            modelBuilder.Entity("CoreTest1.Models.Part", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("PartTypeID");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.HasIndex("PartTypeID");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("CoreTest1.Models.PartType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Units");

                    b.HasKey("ID");

                    b.ToTable("PartTypes");
                });

            modelBuilder.Entity("CoreTest1.Models.Position", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeID");

                    b.Property<int>("StockID");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("StockID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("CoreTest1.Models.Stock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.HasKey("ID");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("CoreTest1.Models.Contract", b =>
                {
                    b.HasOne("CoreTest1.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreTest1.Models.ContractItem", b =>
                {
                    b.HasOne("CoreTest1.Models.Contract", "Contract")
                        .WithMany("PartsInContr")
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreTest1.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreTest1.Models.Left", b =>
                {
                    b.HasOne("CoreTest1.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreTest1.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreTest1.Models.Part", b =>
                {
                    b.HasOne("CoreTest1.Models.PartType", "PartType")
                        .WithMany()
                        .HasForeignKey("PartTypeID");
                });

            modelBuilder.Entity("CoreTest1.Models.Position", b =>
                {
                    b.HasOne("CoreTest1.Models.Employee", "Employee")
                        .WithMany("Positions")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreTest1.Models.Stock", "Stock")
                        .WithMany("Positions")
                        .HasForeignKey("StockID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
